// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  STUDENT
  DOCTOR
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  stdID         String? @unique
  walletID      String? @unique
  role          UserRole @default(STUDENT)
  accounts      Account[]
  files         File[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model File {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  url       String
  filename  String
  mimetype  String
  size      Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model AccessibilityFormData {
//   id String @id @default(cuid())
//   userId             String  @map("user_id")
//   createdAt    DateTime  @default(now())
//   updatedAt    DateTime  @updatedAt
//   studentName  String
//   studentId    String    // Assuming studentId is a string based on the form
//   phoneNumber  String    // Assuming phoneNumber is a string based on the form
//   email        String
//   consent      Boolean   @default(false)
//   authorize    Boolean   @default(false)

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  

// }